<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Jasig under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Jasig licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

  <!--
     +========================================================================
     | TODO:
     |
     | Define following beans:
     |  1. Bean of type org.jasig.cas.authentication.LdapAuthenticationHandler
     |     that sets principalIdAttribute.
     |  2. Bean named "authnConnectionConfig" that defines additional configuration
     |     needed for authentication. A common case is setting up a custom trust store.
     |  3. Bean named "resolverConnectionConfig" that defines additional configuration
     |     needed for principal resolution. A common case is setting up a custom trust store.
     |  4. Bean named "resultAttributeMapping" of type Map that maps LDAP attribute names onto principal attribute
     |     names for principal resolver components.
     |  5. Bean named "userDetailsConnectionConfig" that defines additional configuration
     |     needed for user details searches. A common case is setting up a custom trust store.
     +========================================================================
  -->

  <import resource="extraConfigContext.xml" />

  <context:property-placeholder location="ldaptive.properties"/>

  <bean id="testCredentials" class="org.springframework.beans.factory.config.PropertiesFactoryBean"
      p:location="credentials.properties" />

  <bean id="testPrincipals" class="org.springframework.core.io.ClassPathResource">
    <constructor-arg value="principals.json" />
  </bean>

  <bean id="testUserDetails" class="org.springframework.beans.factory.config.PropertiesFactoryBean"
        p:location="userdetails.properties" />

  <bean id="baseConnectionConfig" class="org.ldaptive.ConnectionConfig" abstract="true"
        p:ldapUrl="${ldap.url}"
        p:connectTimeout="${ldap.connectTimeout}"
        p:useStartTLS="${ldap.useStartTLS}" />

  <bean id="ldapPoolConfig" class="org.ldaptive.pool.PoolConfig"
        p:minPoolSize="${ldap.pool.minSize}"
        p:maxPoolSize="${ldap.pool.maxSize}"
        p:validateOnCheckOut="${ldap.pool.validateOnCheckout}"
        p:validatePeriodically="${ldap.pool.validatePeriodically}"
        p:validatePeriod="${ldap.pool.validatePeriod}" />

  <bean id="pruneStrategy" class="org.ldaptive.pool.IdlePruneStrategy"
        p:prunePeriod="${ldap.pool.prunePeriod}"
        p:idleTime="${ldap.pool.idleTime}" />

  <bean id="searchValidator" class="org.ldaptive.pool.SearchValidator" />

  <bean id="baseConnectionPool" class="org.ldaptive.pool.BlockingConnectionPool" abstract="true"
        init-method="initialize"
        p:poolConfig-ref="ldapPoolConfig"
        p:blockWaitTime="${ldap.pool.blockWaitTime}"
        p:validator-ref="searchValidator"
        p:pruneStrategy-ref="pruneStrategy"/>


  <!--
     +========================================================================
     | LDAP authentication beans
     +========================================================================
  -->
  <bean id="authnConnectionFactory" class="org.ldaptive.DefaultConnectionFactory"
        p:connectionConfig-ref="authnConnectionConfig" />

  <bean id="authnConnectionPool" parent="baseConnectionPool"
        p:connectionFactory-ref="authnConnectionFactory" />

  <bean id="authnPooledLdapConnectionFactory" class="org.ldaptive.pool.PooledConnectionFactory"
        p:connectionPool-ref="authnConnectionPool" />

  <bean id="authenticator" class="org.ldaptive.auth.Authenticator">
    <!-- Define the strategy for resolving DNs from the CAS username. -->
    <constructor-arg>
      <bean class="org.ldaptive.auth.PooledSearchDnResolver"
            p:baseDn="${ldap.authn.baseDn}"
            p:allowMultipleDns="false"
            p:connectionFactory-ref="authnPooledLdapConnectionFactory"
            p:userFilter="${ldap.authn.searchFilter}" />
    </constructor-arg>

    <!-- Define the source of LDAP connections used for authentication. -->
    <constructor-arg>
      <bean class="org.ldaptive.auth.PooledBindAuthenticationHandler"
            p:connectionFactory-ref="authnPooledLdapConnectionFactory" />
    </constructor-arg>
  </bean>

  <!--
     +========================================================================
     | LDAP authentication handler beans
     +========================================================================
  -->
  <bean id="ldapAuthenticationHandler"
        class="org.jasig.cas.authentication.LdapAuthenticationHandler"
        p:principalIdAttribute="sAMAccountName">
    <constructor-arg ref="authenticator" />
    <property name="principalAttributeMap" ref="resultAttributeMapping" />
  </bean>

  <!--
     +========================================================================
     | LDAP credential to principal resolver beans
     +========================================================================
  -->
  <bean id="resolverConnectionFactory" class="org.ldaptive.DefaultConnectionFactory"
        p:connectionConfig-ref="resolverConnectionConfig" />

  <bean id="resolverConnectionPool" parent="baseConnectionPool"
        p:connectionFactory-ref="resolverConnectionFactory" />

  <bean id="resolverPooledLdapConnectionFactory" class="org.ldaptive.pool.PooledConnectionFactory"
        p:connectionPool-ref="resolverConnectionPool" />

  <bean id="attributeRepository"
        class="org.jasig.cas.persondir.LdaptivePersonAttributeDao"
        p:baseDN="${ldap.resolver.baseDn}"
        p:searchFilter="${ldap.resolver.searchFilter}"
        p:connectionFactory-ref="resolverPooledLdapConnectionFactory"
        p:resultAttributeMapping-ref="resultAttributeMapping"
        p:unmappedUsernameAttribute="${ldap.resolver.userNameAttribute}"
        p:usernameAttributeProvider-ref="resolverUsernameProvider">
    <property name="searchControls">
      <bean class="javax.naming.directory.SearchControls"
            p:countLimit="5"
            p:timeLimit="5000"
            p:searchScope="2" />
    </property>
  </bean>

  <bean id="resolver"
      class="org.jasig.cas.authentication.principal.ldap.CredentialsToLdapAttributePrincipalResolver"
      c:connectionFactory-ref="authnConnectionFactory"
      c:searchExecutor-ref="searchExecutorUser" >

    <property name="credentialsToPrincipalResolver">
        <bean class="org.jasig.cas.authentication.principal.UsernamePasswordCredentialsToPrincipalResolver" />
    </property>

    <!-- Attributes fetched by and only available to the ldap resolver itself.
         These are to only be used internally if/when needed and are not
         related to the attribute policy resolution of CAS in anyway. -->
    <property name="attributeMapping" ref="resultAttributeMapping" />
    <property name="attributeRepository" ref="attributeRepository" />
    <property name="usernameProvider" ref="resolverUsernameProvider" />
  </bean>

  <bean id="resolverUsernameProvider"
      class="org.jasig.services.persondir.support.SimpleUsernameAttributeProvider"
      c:usernameAttribute="${ldap.resolver.userNameAttribute}" />

  <!--
     +========================================================================
     | LDAP monitor beans
     +========================================================================
  -->
  <bean class="org.jasig.cas.monitor.ConnectionFactoryMonitor">
      <constructor-arg ref="authnConnectionFactory" />
      <constructor-arg ref="searchValidator" />
  </bean>

  <bean class="org.jasig.cas.monitor.PooledConnectionFactoryMonitor"
        p:executor-ref="poolMonitorExecutor"
        p:maxWait="5000">
    <constructor-arg ref="authnPooledLdapConnectionFactory" />
    <constructor-arg ref="searchValidator" />
  </bean>

  <bean id="poolMonitorExecutor"
        class="org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean"
        p:corePoolSize="1"
        p:maxPoolSize="1"
        p:keepAliveSeconds="5" />

  <!--
     +========================================================================
     | LDAP user details beans
     +========================================================================
  -->
  <bean id="userDetailsConnectionFactory" class="org.ldaptive.DefaultConnectionFactory"
        p:connectionConfig-ref="userDetailsConnectionConfig" />

  <bean id="userDetailsConnectionPool" parent="baseConnectionPool"
        p:connectionFactory-ref="userDetailsConnectionFactory" />

  <bean id="userDetailsPooledLdapConnectionFactory" class="org.ldaptive.pool.PooledConnectionFactory"
        p:connectionPool-ref="userDetailsConnectionPool" />

  <bean id="ldapUserDetailsService" class="org.jasig.cas.userdetails.LdapUserDetailsService"
      c:factory-ref="userDetailsPooledLdapConnectionFactory" c:userSearchExecutor-ref="searchExecutorUser"
      c:roleSearchExecutor-ref="searchExecutorRole" c:userAttributeName-ref="ldapServiceUsernameProvider"
      c:roleAttributeName-ref="ldapServiceRoleUsernameProvider" />

  <bean id="ldapServiceUsernameProvider"
      class="org.jasig.services.persondir.support.SimpleUsernameAttributeProvider"
      c:usernameAttribute="${ldap.userdetails.user.attribute}" />

  <bean id="ldapServiceRoleUsernameProvider"
      class="org.jasig.services.persondir.support.SimpleUsernameAttributeProvider"
      c:usernameAttribute="${ldap.userdetails.role.attribute}" />

  <bean id="searchExecutorUser" class="org.ldaptive.SearchExecutor"
        p:baseDn="${ldap.userdetails.user.baseDn}"
        p:searchFilter="${ldap.userdetails.user.searchFilter}"
        p:returnAttributes-ref="userDetailsUserAttributes" />

  <bean id="searchExecutorRole" class="org.ldaptive.SearchExecutor"
            p:baseDn="${ldap.userdetails.role.baseDn}"
            p:searchFilter="${ldap.userdetails.role.searchFilter}"
            p:returnAttributes-ref="userDetailsRoleAttributes" />

  <util:list id="userDetailsUserAttributes">
    <value>${ldap.userdetails.user.attribute}</value>
  </util:list>

  <util:list id="userDetailsRoleAttributes">
    <value>${ldap.userdetails.role.attribute}</value>
  </util:list>

  <util:map id="resultAttributeMapping">
    <entry key="cn" value="commonName" />
    <entry key="name" value="name" />
  </util:map>
</beans>